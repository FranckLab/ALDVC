<?xml version="1.0" encoding="utf-8"?>
<demos><!--This is an autogenerated file, please do not modify-->
   <name>regularizeNd</name>
   <type>toolbox</type>
   <icon>HelpIcon.DEMOS</icon>
   <website/>
   <description>regularizeNd Fits a nD lookup table with smoothness to scattered data. Constraints are possible. 
regularizeNd answers the question what is the best possible lookup table that the scattered data input x and output y in the least squares sense with smoothing? regularizeNd is meant to calculate a smooth lookup table given n-D scattered data. regularizeNd supports extrapolation from a scattered data set. 
The calculated lookup table, yGrid, is meant to be used with griddedInterpolant class with the conservative memory form. Call griddedInterpolant like 

xGrid = cell array of grid vectors 
smoothness = smoothness value or vector 
yGrid = regularizeNd(xData, yData, xGrid, smoothness); 
F = griddedInterpolant(xGrid, yGrid). 

Desirable properties of regularizeNd: 
-Calculates a relationship between the input x and the output y without definition of the functional form of x to y. 
-Often the fit is superior to polynomial type fitting without the wiggles. 
-Extrapolation is possible from a scattered data set. 
-After creating the lookup table yGrid and using it with griddedInterpolant, as the query point moves away from the scattered data, the relationship between the input x and output y becomes more linear because of the smoothness equations and no nearby fidelity equations. The linear relationship is a good choice when the relationship between x and y is unknown in extrapolation. 
-regularizeNd can handle 1D, 2D, nD input data to 1D output data. RegularizeData3D and gridfit can only handle 2D input and 1D out (total 3D). 
-regularizeNd can handle setting the smoothness to 0 in any/some axis/dimension. This means no smoothing is applied in a particular axis/dimension and the data is just a least squares fit of a lookup table in that axis/dimension. Note this is not recommended and often can lead to an ill-conditioned fitting problem. However, I have found it useful so I left this as an option. 
- Constraints are possible with the function regularizeNdMatrices. See the example.

The source code is locate here: 
https://github.com/jasonnicholson/regularizeNd

For an introduction on how regularization of a lookup table works, start here: https://mathformeremortals.wordpress.com/2013/01/29/introduction-to-regularizing-with-2d-data-part-1-of-3/

Acknowledgement 
Special thanks to Peter Goldstein, author of RegularizeData3D, for his coaching and help through writing regularizeNd.</description>
   <demosection>
      <label>documentation</label>
      <demoitem>
         <label>regularizeNdDoc</label>
         <type>other</type>
         <source>regularizeNdDoc</source>
         <file>documentation/html/regularizeNdDoc.html</file>
      </demoitem>
      <demoitem>
         <label>regularizeNdMatricesDoc</label>
         <type>other</type>
         <source>regularizeNdMatricesDoc</source>
         <file>documentation/html/regularizeNdMatricesDoc.html</file>
      </demoitem>
   </demosection>
   <demosection>
      <label>From RegularizeData3D</label>
      <demoitem>
         <label>coarse_vs_fine_grids</label>
         <type>other</type>
         <source>coarse_vs_fine_grids</source>
         <file>Examples/From RegularizeData3D/html/coarse_vs_fine_grids.html</file>
      </demoitem>
      <demoitem>
         <label>cubic_vs_linear</label>
         <type>other</type>
         <source>cubic_vs_linear</source>
         <file>Examples/From RegularizeData3D/html/cubic_vs_linear.html</file>
      </demoitem>
   </demosection>
   <demosection>
      <label>From gridfit</label>
      <demoitem>
         <label>demo_from_gridfit</label>
         <type>other</type>
         <source>demo_from_gridfit</source>
         <file>Examples/From gridfit/html/demo_from_gridfit.html</file>
      </demoitem>
   </demosection>
   <demosection>
      <label>Examples</label>
      <demoitem>
         <label>constraint_and_Mapping_Example</label>
         <type>other</type>
         <source>constraint_and_Mapping_Example</source>
         <file>Examples/html/constraint_and_Mapping_Example.html</file>
      </demoitem>
      <demoitem>
         <label>example1</label>
         <type>other</type>
         <source>example1</source>
         <file>Examples/html/example1.html</file>
      </demoitem>
      <demoitem>
         <label>example1D</label>
         <type>other</type>
         <source>example1D</source>
         <file>Examples/html/example1D.html</file>
      </demoitem>
      <demoitem>
         <label>exampleIterativeSolver</label>
         <type>other</type>
         <source>exampleIterativeSolver</source>
         <file>Examples/html/exampleIterativeSolver.html</file>
      </demoitem>
      <demoitem>
         <label>example_4D_input</label>
         <type>other</type>
         <source>example_4D_input</source>
         <file>Examples/html/example_4D_input.html</file>
      </demoitem>
      <demoitem>
         <label>example_scattered_data_near_convex_hull</label>
         <type>other</type>
         <source>example_scattered_data_near_convex_hull</source>
         <file>Examples/html/example_scattered_data_near_convex_hull.html</file>
      </demoitem>
      <demoitem>
         <label>example_solver_differences</label>
         <type>other</type>
         <source>example_solver_differences</source>
         <file>Examples/html/example_solver_differences.html</file>
      </demoitem>
   </demosection>
</demos>